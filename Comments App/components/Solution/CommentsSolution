import {Component} from 'react'
import {v4} from 'uuid'

import CommentItem from '../CommentItem'

import './index.css'

const initialContainerBackgroundClassNames = [
  'amber',
  'blue',
  'orange',
  'emerald',
  'teal',
  'red',
  'light-blue',
]

class Comments extends Component {
  state = {
    nameInput: '',
    commentInput: '',
    commentsList: [],
  }

  deleteComment = commentId => {
    const {commentsList} = this.state

    this.setState({
      commentsList: commentsList.filter(comment => comment.id !== commentId),
    })
  }

  toggleIsLiked = id => {
    this.setState(prevState => ({
      commentsList: prevState.commentsList.map(eachComment => {
        if (id === eachComment.id) {
          return {...eachComment, isLiked: !eachComment.isLiked}
        }
        return eachComment
      }),
    }))
  }

  renderCommentsList = () => {
    const {commentsList} = this.state

    return commentsList.map(eachComment => (
      <CommentItem
        key={eachComment.id}
        commentDetails={eachComment}
        toggleIsLiked={this.toggleIsLiked}
        deleteComment={this.deleteComment}
      />
    ))
  }

  onAddComment = event => {
    event.preventDefault()
    const {nameInput, commentInput} = this.state
    const initialBackgroundColorClassName = `initial-container ${
      initialContainerBackgroundClassNames[
        Math.ceil(
          Math.random() * initialContainerBackgroundClassNames.length - 1,
        )
      ]
    }`
    const newComment = {
      id: v4(),
      name: nameInput,
      comment: commentInput,
      date: new Date(),
      isLiked: false,
      initialClassName: initialBackgroundColorClassName,
    }

    this.setState(prevState => ({
      commentsList: [...prevState.commentsList, newComment],
      nameInput: '',
      commentInput: '',
    }))
  }

  onChangeCommentInput = event => {
    this.setState({
      commentInput: event.target.value,
    })
  }

  onChangeNameInput = event => {
    this.setState({
      nameInput: event.target.value,
    })
  }

  render() {
    const {nameInput, commentInput, commentsList} = this.state

    return (
      <div className="app-container">
        <div className="comments-container">
          <h1 className="app-heading">Comments</h1>
          <div className="comments-inputs">
            <form className="form" onSubmit={this.onAddComment}>
              <p className="form-description">
                Say something about 4.0 Technologies
              </p>
              <input
                type="text"
                className="name-input"
                placeholder="Your Name"
                value={nameInput}
                onChange={this.onChangeNameInput}
              />
              <textarea
                placeholder="Your Comment"
                className="comment-input"
                value={commentInput}
                onChange={this.onChangeCommentInput}
                rows="6"
              />
              <button type="submit" className="add-button">
                Add Comment
              </button>
            </form>
            <img
              className="image"
              src="https://assets.ccbp.in/frontend/react-js/comments-app/comments-img.png"
              alt="comments"
            />
          </div>
          <hr className="line" />
          <p className="heading">
            <span className="comments-count">{commentsList.length}</span>
            Comments
          </p>
          <ul className="comments-list">{this.renderCommentsList()}</ul>
        </div>
      </div>
    )
  }
}

export default Comments

//this is solution file


.app-container {
  display: flex;
  justify-content: center;
  margin-top: 48px;
}

@media screen and (min-width: 768px) {
  .comments-app-container {
    margin-top: 96px;
  }
}

.comments-container {
  display: flex;
  flex-direction: column;
  width: 90%;
  max-width: 550px;
}

@media screen and (min-width: 768px) {
  .comments-container {
    width: 80%;
    max-width: 1140px;
  }
}

.line {
  border: 1px solid #dee0e3;
  width: 100%;
  margin-top: 16px;
}

.comments-inputs {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

@media screen and (min-width: 768px) {
  .comments-inputs {
    flex-direction: row;
  }
}

.app-heading {
  color: #1e293b;
  font-family: 'Roboto';
  font-size: 48px;
  margin-bottom: 12px;
}

@media screen and (min-width: 768px) {
  .app-heading {
    font-size: 56px;
    margin-top: 0px;
    margin-bottom: 24px;
  }
}

.form-description {
  color: #475569;
  font-family: 'Roboto';
  font-size: 16px;
  font-weight: 500;
  margin-top: 24px;
}

.form {
  display: flex;
  flex-direction: column;
  width: 100%;
  order: 1;
}

@media screen and (min-width: 768px) {
  .form {
    width: 28%;
    min-width: 300px;
    order: 0;
  }
}

.name-input {
  font-family: 'Roboto';
  font-size: 16px;
  height: 40px;
  border: 1px solid #cbd2d9;
  border-radius: 4px;
  margin-bottom: 12px;
  padding-left: 16px;
  padding-top: 8px;
  padding-bottom: 8px;
  outline: none;
}

.comment-input {
  font-family: 'Roboto';
  font-size: 16px;
  border: 1px solid #cbd2d9;
  border-radius: 4px;
  padding-left: 16px;
  padding-top: 8px;
  padding-bottom: 8px;
  outline: none;
}

.add-button {
  background-color: #0284c7;
  color: #ffffff;
  font-size: 14px;
  font-family: 'Roboto';
  border-radius: 4px;
  border: none;
  padding-left: 16px;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-right: 16px;
  margin-top: 16px;
  min-width: 60px;
  align-self: flex-start;
  outline: none;
  cursor: pointer;
}

.image {
  width: 280px;
  height: 200px;
}

@media screen and (min-width: 768px) {
  .image {
    width: 380px;
    height: 300px;
  }
}

.heading {
  color: #475569;
  font-family: 'Roboto';
  font-size: 14px;
  font-weight: 500;
  margin-left: 8px;
}

.comments-count {
  text-align: center;
  color: #ffffff;
  background-color: #0284c7;
  font-size: 12px;
  font-family: 'Roboto';
  border-radius: 4px;
  padding-left: 8px;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-right: 8px;
  margin-right: 4px;
}

.comments-list {
  padding-left: 0;
  margin-top: 0;
}
